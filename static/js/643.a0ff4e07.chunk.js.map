{"version":3,"file":"static/js/643.a0ff4e07.chunk.js","mappings":"+NAEQA,EAAaC,EAAQ,MAArBD,SACAE,EAAgBD,EAAQ,MAAxBC,YAwER,EAtEkB,WAChB,MAA0BF,EAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,EAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,EAAWL,IAEXM,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,QACHP,EAASQ,GACT,MACF,IAAK,WACHN,EAAYM,GAMjB,EAmBD,OACE,kBAAMC,SAlBkB,SAAAC,GACxBA,EAAMC,iBACN,IAAMC,EAAY,CAAEb,MAAAA,EAAOE,SAAAA,GAC3BY,QAAQC,IAAI,YAAaF,GACzBT,GAASY,EAAAA,EAAAA,IAAMH,IACZI,SACAC,MAAK,SAAAC,GACJC,EAAAA,GAAAA,QAAA,UAAiBD,EAAsBN,UAAUL,KAAjD,kBACD,IACAa,OAAM,WACLD,EAAAA,GAAAA,QAAc,8BACf,IAEHnB,EAAS,IACTE,EAAY,GACb,EAGC,WACE,6BAAO,SAEL,kBACEmB,KAAK,QACLd,KAAK,QACLC,MAAOT,EACPuB,QAAQ,2EACRC,MAAM,oLACNC,UAAQ,EACRC,YAAY,kBACZC,SAAUtB,QAGd,6BAAO,YAEL,kBACEiB,KAAK,WACLd,KAAK,WACLC,MAAOP,EACPqB,QAAQ,2CACRC,MAAM,wJACNC,UAAQ,EACRC,YAAY,qBACZC,SAAUtB,QAGd,mBAAQiB,KAAK,SAAb,SAAsB,YAG3B,ECnED,EAJkB,WAChB,OAAO,SAAC,EAAD,GACR,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { logIn } from 'redux/auth/authThunk';\nconst { useState } = require('react');\nconst { useDispatch } = require('react-redux');\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChangeInput = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const hendleSubmitLogin = event => {\n    event.preventDefault();\n    const loginUser = { email, password };\n    console.log('logInUser', loginUser);\n    dispatch(logIn(loginUser))\n      .unwrap()\n      .then(originalPromiseResult => {\n        toast.success(`${originalPromiseResult.loginUser.name} welcome back!`);\n      })\n      .catch(() => {\n        toast.failure('Incorrect login or password');\n      });\n\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form onSubmit={hendleSubmitLogin}>\n      <label>\n        Email\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          pattern=\"/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.\"\n          title=\"Email may contain letters, numbers, an apostrophe, and must be followed by '@' domain name '.' domain suffix. For example Taras@ukr.ua, adrian@gmail.com, JacobM3rcer@hotmail.com\"\n          required\n          placeholder=\"Enter email ...\"\n          onChange={handleChangeInput}\n        />\n      </label>\n      <label>\n        Password\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          pattern=\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\"\n          title=\"Password must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters. For example TgeV23592, 3Greioct.\"\n          required\n          placeholder=\"Enter password ...\"\n          onChange={handleChangeInput}\n        />\n      </label>\n      <button type=\"submit\">LogIn</button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n"],"names":["useState","require","useDispatch","email","setEmail","password","setPassword","dispatch","handleChangeInput","e","currentTarget","name","value","onSubmit","event","preventDefault","loginUser","console","log","logIn","unwrap","then","originalPromiseResult","toast","catch","type","pattern","title","required","placeholder","onChange"],"sourceRoot":""}